#!/usr/bin/env pmpython
#
# Copyright (C) 2017 Ronak Jain.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

import sys
import cpmapi as c_api
import argparse
from pcp import pmapi

parser = argparse.ArgumentParser(description='Python test for mergeLabelSets')

# Location Label
locationJSON = "{\"datacenter\":\"torquay\",\"environment\":\"production\"}"

locationLabels = (pmapi.pmLabel * 2)()

locationLabel1 = locationLabels[0]
locationLabel1.name = 2
locationLabel1.namelen = 10
locationLabel1.value = 14
locationLabel1.valuelen = 9
locationLabel1.flags = c_api.PM_LABEL_CONTEXT | c_api.PM_LABEL_OPTIONAL

locationLabel2 = locationLabels[1]
locationLabel2.name = 25
locationLabel2.namelen = 11
locationLabel2.value = 38
locationLabel2.valuelen = 12
locationLabel2.flags = c_api.PM_LABEL_CONTEXT

locationLabelSet = pmapi.pmLabelSet()
locationLabelSet.nlabels = len(locationLabels)
locationLabelSet.json = locationJSON.encode('utf-8')
locationLabelSet.jsonlen = len(locationJSON)
locationLabelSet.labels = locationLabels

#Service Label
serviceJSON = "{\"services\":[\"indexer\",\"database\"]}"
serviceLabels = (pmapi.pmLabel * 1)()

serviceLabel1 = serviceLabels[0]
serviceLabel1.name = 2
serviceLabel1.namelen = 8
serviceLabel1.value = 12
serviceLabel1.valuelen = 22
serviceLabel1.flags = c_api.PM_LABEL_DOMAIN

serviceLabelSet = pmapi.pmLabelSet()
serviceLabelSet.nlabels = len(serviceLabels)
serviceLabelSet.json = serviceJSON.encode('utf-8')
serviceLabelSet.jsonlen = len(serviceJSON)
serviceLabelSet.labels = serviceLabels

#Testing Label
testingJSON = "{\"more\":{\"all\":false,\"none\":true},\"none\":none,\"some\":[1,2,3]}"
testingLabels = (pmapi.pmLabel * 3)()

testingLabel1 = testingLabels[0]
testingLabel1.name = 2
testingLabel1.namelen = 4
testingLabel1.value = 8
testingLabel1.valuelen = 25
testingLabel1.flags = c_api.PM_LABEL_ITEM | c_api.PM_LABEL_OPTIONAL

testingLabel2 = testingLabels[1]
testingLabel2.name = 35
testingLabel2.namelen = 4
testingLabel2.value = 41
testingLabel2.valuelen = 4
testingLabel2.flags = c_api.PM_LABEL_CONTEXT | c_api.PM_LABEL_OPTIONAL

testingLabel3 = testingLabels[2]
testingLabel3.name = 47
testingLabel3.namelen = 4
testingLabel3.value = 53
testingLabel3.valuelen = 7
testingLabel3.flags = c_api.PM_LABEL_CONTEXT | c_api.PM_LABEL_OPTIONAL

testingLabelSet = pmapi.pmLabelSet()
testingLabelSet.nlabels = len(testingLabels)
testingLabelSet.json = testingJSON.encode('utf-8')
testingLabelSet.jsonlen = len(testingJSON)
testingLabelSet.labels = testingLabels

#Empty Label
emptyJSON = "{}"
emptyLabelSet = pmapi.pmLabelSet()
emptyLabelSet.nlabels = 0
emptyLabelSet.json = emptyJSON.encode('utf-8')
emptyLabelSet.jsonlen = len(emptyJSON)

#test1 - Merge all Labelsets without Filter
test_result1 = pmapi.pmContext.pmMergeLabelSets([
		locationLabelSet,
		serviceLabelSet,
		testingLabelSet,
		emptyLabelSet ], None, None)
print("Python: Merged testing/services/location (no filter):\n%s\n" % (test_result1))

#test2 - Merge Labelsets with cull optional filter
def cull_optional(label_p, json, arg_p):
	if label_p.contents.flags & c_api.PM_LABEL_OPTIONAL:
		return 0
	return 1

test_result2 = pmapi.pmContext.pmMergeLabelSets([
		serviceLabelSet,
		locationLabelSet ], cull_optional, None)
print("Python: Merged services/location (cull optional):\n%s\n" % (test_result2))

#test3 - Merge Labelsets with cull none filter
def cull_none(label_p, json, arg_p):
	value = label_p.contents.value
	if json[value + 1 : value + 5] == "none":
		return 1
	return 0

test_result3 = pmapi.pmContext.pmMergeLabelSets([
		serviceLabelSet,
		locationLabelSet,
		emptyLabelSet ], cull_none, None)
print("Python: Merged services/location/empty (cull none):\n%s" % (test_result3))
