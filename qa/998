#!/bin/sh
# PCP QA Test No. 998
# Exercise libpcp: unlock context before returning
# See https://github.com/performancecopilot/pcp/pull/50
#
# Copyright (c) 2015 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

status=1	# failure is the default!
$sudo rm -rf $tmp $tmp.* $seq.full
trap "cd $here; $sudo rm -rf $tmp.*; exit \$status" 0 1 2 3 15

eval `pmconfig -L lock_asserts`

# The alternte filter is required if libpcp is built with
# BUILD_LOCK_ASSERTS defined.
#
# Otherwise expect this ...
# Unlock Fail: Operation not permitted
# may see this on Solaris/OpenIndiana ...
# Unlock Fail: Not owner
#
_filter()
{
    if $lock_asserts
    then
	tee -a $here/$seq.full \
	| sed \
	    -e '/github-50: lock.c:[0-9]*: __pmUnlock: Assertion .* failed/s/.*/Unlock Fail: Operation not permitted/' \
	    -e '/Aborted (core dumped)/d' \
	# end
    else
	cat
    fi \
    | sed \
	-e '/Unlock Fail/s/Not owner/Operation not permitted/' \
    # end
}

# real QA test starts here
echo "=== -x (no context) ==="
( sh -c "src/github-50 -x" 2>&1 ) | _filter

echo
echo "=== no args, default context ==="
( sh -c "src/github-50" 2>&1 ) | _filter

echo
echo "=== -h local: ==="
( sh -c "src/github-50 -h 'local:'" 2>&1 ) | _filter

echo
echo '=== -h `hostname` ==='
( sh -c "src/github-50 -h `hostname`" 2>&1 ) | _filter

echo
echo '=== -L ==='
( $sudo_local_ctx sh -c "src/github-50 -L" 2>&1 ) | _filter

echo
echo '=== -a archives/ok-foo ==='
( sh -c "src/github-50 -a archives/ok-foo" 2>&1 ) | _filter

# success, all done
status=0

exit
