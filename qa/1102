#!/bin/sh
# PCP QA Test No. 1102
# pmdaprometheus testing
# specifically testing generic usecase
#
# Note: if anything gets added or changed in qa/prometheus/samples directory,
# then this test (and all tests in group pmda.prometheus) will need to be remade.

#
# Copyright (c) 2017 Red Hat.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.prometheus

_pmdaprometheus_check || _notrun "prometheus pmda and/or load generator not installed"

status=1	# failure is the default!
$sudo rm -rf $tmp $tmp.* $seq.full
totalendpoints=10 #total queue to work through
endpoints=5 #prometheus endpoints
iterations=5
metrics=10
instances=10
errors=0
delay=0

_cleanup()
{
    if [ -n "$pid" ]
    then
	$sudo $PCP_BINADM_DIR/pmsignal -s TERM $pid 2>&1 >/dev/null
	pid=""
    fi

    echo "=== prometheus PMDA log ===" >>$here/$seq.full
    if [ -f $PCP_LOG_DIR/pmcd/prometheus.log ]
    then
	cat $PCP_LOG_DIR/pmcd/prometheus.log >>$here/$seq.full
    else
	echo "Error: PMDA log file is missing" >>$here/$seq.full
    fi
}

_prepare_pmda prometheus
trap "_cleanup; _cleanup_pmda prometheus >>$here/$seq.full; exit \$status" 0 1 2 3 15

_pmdaprometheus_save_config
_pmdaprometheus_install

port=`_find_free_port 10000`
echo "port=$port" >>$here/$seq.full

$python $here/prometheus/prometheus_endpoint.python \
	--port=$port \
	--output $PCP_PMDAS_DIR/prometheus/urls.d/ \
	--total $totalendpoints \
	--endpoints $endpoints \
	--metrics $metrics \
	--instances $instances \
	--limit $iterations \
	--delay $delay \
	--error $errors >> $tmp.full 2>&1 &
pid=$!

if ! _pmdaprometheus_wait_for_metric prometheus.source4
then
    _pmdaprometheus_restore_config
    status=1
    exit
fi

if pminfo -v `pminfo prometheus.source0 | LC_COLLATE=POSIX sort` > $tmp.info 2> $tmp.err
then
    :
else
    echo "... failed! ... here is the Install log ..."
    cat $tmp.out
fi
cat $tmp.info $tmp.err

if pminfo -fd `pminfo prometheus.source1 | LC_COLLATE=POSIX sort` > $tmp.info 2>$tmp.err
   then
    echo "Fetch and desc prometheus metrics: success"
    cat $tmp.info
else
    echo "Fetch and desc prometheus metrics: failed"
    cat $tmp.err
fi
sleep 1
for i in 1 2 3
do
    pminfo -f `pminfo prometheus.source0 | LC_COLLATE=POSIX sort`
    pminfo -f `pminfo prometheus.source1 | LC_COLLATE=POSIX sort`
done
sleep 1
for i in 1 2 3 4
do
    pminfo -f `pminfo prometheus.source2 | LC_COLLATE=POSIX sort`
    pminfo -f `pminfo prometheus.source3 | LC_COLLATE=POSIX sort`
done
sleep 1
for i in 1 2 3 4
do
    pminfo -f `pminfo prometheus.source4 | LC_COLLATE=POSIX sort`
done

_pmdaprometheus_remove
_pmdaprometheus_restore_config

# success, all done
status=0
exit
