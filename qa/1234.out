QA output created by 1234

== Empty JSON object

Input: {}
Output:
{}
  => Minimal: exitsts = 0
{}
  => Pretty: exitsts = 0
  => Quiet: exitsts = 0

  => YAML: exitsts = 0

== Empty JSON array

Input: {}
Output:
{}
  => Minimal: exitsts = 0
{}
  => Pretty: exitsts = 0
  => Quiet: exitsts = 0

  => YAML: exitsts = 0

== Invalid string

Input: -}
Output:
pmjson: failed - Invalid argument
  => Minimal: exitsts = 1
pmjson: failed - Invalid argument
  => Pretty: exitsts = 1
pmjson: failed - Invalid argument
  => Quiet: exitsts = 1
pmjson: failed - Invalid argument
  => YAML: exitsts = 1

== Basic data types

Input: {"a":1,"b":"str","c":[1,2,3],"d":false,"e":null,"f":{"map":1}}
Output:
{"a":1,"b":"str","c":[1,2,3],"d":false,"e":null,"f":{"map":1}}
  => Minimal: exitsts = 0
{
    "a": 1,
    "b": "str",
    "c": [
        1,
        2,
        3
    ],
    "d": false,
    "e": null,
    "f": {
        "map": 1
    }
}
  => Pretty: exitsts = 0
  => Quiet: exitsts = 0
a: 1
b: str
c: 
      - 1
      - 2
      - 3
d: false
e: null
f: 
    map: 1
  => YAML: exitsts = 0

== Nested data types

Input: {"a":{"b":"str","c":{"d":[1,2,3]}},"e":false,"f":{"map":1,"array":[1,2]}}
Output:
{"a":{"b":"str","c":{"d":[1,2,3]}},"e":false,"f":{"map":1,"array":[1,2]}}
  => Minimal: exitsts = 0
{
    "a": {
        "b": "str",
        "c": {
            "d": [
                1,
                2,
                3
            ]
        }
    },
    "e": false,
    "f": {
        "map": 1,
        "array": [
            1,
            2
        ]
    }
}
  => Pretty: exitsts = 0
  => Quiet: exitsts = 0
a: 
    b: str
    c: 
        d: 
              - 1
              - 2
              - 3
e: false
f: 
    map: 1
    array: 
          - 1
          - 2
  => YAML: exitsts = 0

