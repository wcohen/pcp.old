#
# Common shell routines for testing pmdaprometheus
#
# Copyright (c) 2017 Red Hat.
#

# get standard environment, filters and checks
. ./common.python

_pmdaprometheus_check()
{
    [ -f $PCP_PMDAS_DIR/prometheus/pmdaprometheus.python ] || return 1
    [ -f $here/prometheus/prometheus_endpoint.python ] || return 1
    return 0
}

_pmdaprometheus_remove()
{
    echo
    echo "=== remove prometheus agent ==="
    $sudo ./Remove >$tmp.out 2>&1
    _filter_pmda_remove <$tmp.out
}

_pmdaprometheus_install()
{
    # start from known starting points
    cd $PCP_PMDAS_DIR/prometheus
    $sudo ./Remove >/dev/null 2>&1
    _service pmcd stop 2>&1 | _filter_pcp_stop

    echo
    echo "=== prometheus agent installation ==="
    $sudo ./Install </dev/null >$tmp.out 2>&1
    cat $tmp.out >>$here/$seq.full
}

_pmdaprometheus_save_config()
{
    _save_config $PCP_PMDAS_DIR/prometheus/urls.d
    _save_config $PCP_VAR_DIR/config/pmda
    $sudo rm -f $PCP_PMDAS_DIR/prometheus/urls.d/*
    $sudo rm -f $PCP_VAR_DIR/config/pmda/*
    $sudo chmod 777 $PCP_PMDAS_DIR/prometheus/urls.d/
}

_pmdaprometheus_restore_config()
{
    _restore_config $PCP_PMDAS_DIR/prometheus/urls.d
    _restore_config $PCP_VAR_DIR/config/pmda
}

# wait for the PMDA to dynamically create a named metric (or subtree)
_pmdaprometheus_wait_for_metric()
{
    metric=$1
    for i in `seq 1 30`; do
    	if pminfo $metric >/dev/null 2>&1
	then
	    return 0
	fi
	sleep 1
    done
    # timeout
    echo _pmdaprometheus_wait_for_metric FAILED for metric $metric
    return 1
}
