#!/bin/sh
# PCP QA Test No. 1083
# Check pmcd with systemd - restart, stop and start actions.
#
# Copyright (c) 2017 Ken McDonell.  All Rights Reserved.
#

seq=`basename $0`
echo "QA output created by $seq"

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

[ -n "$PCP_SYSTEMDUNIT_DIR" ] || _notrun "PCP_SYSTEMUNIT_DIR not set, so no systemd here"
[ -f $PCP_SYSTEMDUNIT_DIR/pmcd.service ] || _notrun "$PCP_SYSTEMDUNIT_DIR/pmcd.service not found"

_cleanup()
{
    cd $here
    _service pmcd stop >>$here/$seq.full 2>&1
    $restore_pcpqa_systemd && export PCPQA_SYSTEMD=$save_pcpqa_systemd
    _service pcp restart | _filter_pcp_start
    _restore_auto_restart
    _wait_for_pmcd
    $PCP_PS_PROG $PCP_PS_ALL_FLAGS | egrep '[p]mcd|[P]ID' >>$here/$seq.full
    _wait_for_pmlogger
    $sudo rm -rf $tmp $tmp.*
}

restore_pcpqa_systemd=false

status=1	# failure is the default!
$sudo rm -rf $tmp $tmp.* $seq.full
trap "_cleanup; exit \$status" 0 1 2 3 15

if [ "$PCPQA_SYSTEMD" = x -o "${PCPQA_SYSTEMD-x}" != x ]
then
    # $PCPQA_SYSTEMD is already set ...
    save_pcpqa_systemd="$PCPQA_SYSTEMD"
    restore_pcpqa_systemd=true
fi
unset PCPQA_SYSTEMD

_stop_auto_restart

# get to a known starting point as far as systemd is concerned
#
ls -ld $tmp >>$here/$seq.full 2>&1
_service pmcd restart >>$here/$seq.full 2>&1
ls -ld $tmp >>$here/$seq.full 2>&1
_wait_for_pmcd
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | egrep '[p]mcd|[P]ID' >>$here/$seq.full

# real QA test starts here
_service pmcd stop >>$here/$seq.full 2>&1
_wait_for_pmcd_stop
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | egrep '[p]mcd|[P]ID' >>$here/$seq.full

echo "expect failure ..."
pmprobe hinv.ncpu

_service pmcd start >>$here/$seq.full 2>&1
_wait_for_pmcd
$PCP_PS_PROG $PCP_PS_ALL_FLAGS | egrep '[p]mcd|[P]ID' >>$here/$seq.full

echo "expect success ..."
pmprobe hinv.ncpu

# success, all done
status=0
exit
