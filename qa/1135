#!/bin/sh
# PCP QA Test No. 1135
# Live filtering using dynamic indoms test with pmrep, uses sample.dynamic.counter
#
# Copyright (c) 1995-2002 Silicon Graphics, Inc.  All Rights Reserved.
# Copyright (c) 2017 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

. ./common.python

$python -c "from pcp import pmapi" >/dev/null 2>&1
[ $? -eq 0 ] || _notrun "python pcp pmapi module not installed"
$python -c "from collections import OrderedDict" >/dev/null 2>&1
[ $? -eq 0 ] || _notrun "python collections OrderedDict module not installed"

which pmrep >/dev/null 2>&1 || _notrun "pmrep not installed"

status=1        # failure is the default!
hostname=`hostname`
$sudo rm -rf $tmp $tmp.* $seq.full
trap "cd $here; _cleanup; exit \$status" 0 1 2 3 15

sleep=$PCP_BINADM_DIR/pmsleep
signal=$PCP_BINADM_DIR/pmsignal
control=$PCP_PMDAS_DIR/sample/dynamic.indom

_cleanup()
{
    [ -f $control.qa-$seq ] && $sudo mv $control.qa-$seq $control
    rm -f $tmp.*
}

$sudo rm -f $control.qa-$seq
[ -f $control ] && $sudo mv $control $control.qa-$seq

# real QA test starts here
_restart_services()
{
    if [ $hostname = "mars" ]; then
       # local testing without a full pcp install (myllynen)
       $sudo systemctl stop pmlogger pmcd
       $sleep 1
       $sudo systemctl start pmlogger pmcd
       $sleep 2
    else
       _service pcp restart | _filter_pcp_start
       _wait_for_pmcd
       _wait_for_pmlogger
    fi
}

_msg_filter()
{
    sed \
       -e "s,Recording .* metrics.*,Recording metrics...,g" \
    #end
}

run_test()
{
    f=-i
    r='.*one.*'
    # initial config
    #
    cat >$tmp.indom <<End-of-File
20 two
30 three
200 twenty
End-of-File
    $sudo rm -f $control
    $sudo cp $tmp.indom $control
    pminfo -f sample.dynamic.counter >/dev/null 2>&1

    # start pmrep
    #
    pmrep -o archive -r -t 1s -T 6s -F $tmp.archive -j $f $r sample.dynamic.counter | _msg_filter &
    $sleep 0.5
    $sleep 1

    # add one instance of interest and few others
    #
    cat >$tmp.indom <<End-of-File
10 one
20 two
30 three
40 four
50 five
200 twenty
End-of-File
    $sudo rm -f $control
    $sudo cp $tmp.indom $control
    $sleep 1
    pminfo -f sample.dynamic.counter >/dev/null 2>&1

    # add another
    #
    cat >$tmp.indom <<End-of-File
10 one
20 two
30 three
40 four
50 five
200 twenty
210 twentyone
220 twentytwo
End-of-File
    $sudo rm -f $control
    $sudo cp $tmp.indom $control
    $sleep 1
    pminfo -f sample.dynamic.counter >/dev/null 2>&1

    # remove first one
    #
    cat >$tmp.indom <<End-of-File
200 twenty
210 twentyone
220 twentytwo
End-of-File
    $sudo rm -f $control
    $sudo cp $tmp.indom $control
    $sleep 1
    pminfo -f sample.dynamic.counter >/dev/null 2>&1

    # remove everything
    #
    cat >$tmp.indom <<End-of-File
End-of-File
    $sudo rm -f $control
    $sudo cp $tmp.indom $control
    $sleep 1
    pminfo -f sample.dynamic.counter >/dev/null 2>&1

    # restore initial config with one instance of interest
    #
    cat >$tmp.indom <<End-of-File
10 one
20 two
30 three
200 twenty
End-of-File
    $sudo rm -f $control
    $sudo cp $tmp.indom $control
    $sleep 1
    pminfo -f sample.dynamic.counter >/dev/null 2>&1

    wait

    $sudo rm -f $control

    pmrep -o stdout -r -u -a $tmp.archive sample
}

echo "=== pmrep archive output with live filtering"
run_test

# success, all done
status=0
exit
